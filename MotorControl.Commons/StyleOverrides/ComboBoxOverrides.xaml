<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ControlTemplate x:Key="MaterialDesignFloatingHintComboBoxTemplateOverrided" TargetType="{x:Type ComboBox}">
        <Border Style="{StaticResource MotorControlBorderDefaultStyle}">
            <Grid>
                <ToggleButton
                x:Name="toggleButton"
                Grid.Column="0"
                Panel.ZIndex="1"
                Background="Transparent"
                BorderBrush="{TemplateBinding BorderBrush}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource MaterialDesignComboBoxToggleButton}"
                Margin="0,0,5,0"
                Padding="{TemplateBinding Padding}" />
                <AdornerDecorator>
                    <Border
                    x:Name="templateRoot"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                    SnapsToDevicePixels="True"
                    wpf:BottomDashedLineAdorner.IsAttached="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource NotConverter}}"
                    wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                    wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                            </Grid.ColumnDefinitions>
                            <Border
                            Grid.Column="0"
                            Grid.Row="0"
                            Padding="{TemplateBinding Padding}">
                                <Grid
                                x:Name="InnerRoot"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                    Grid.Column="0"
                                    FontSize="{TemplateBinding FontSize}"
                                    Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                    Text="{TemplateBinding wpf:TextFieldAssist.PrefixText}"
                                    IsHitTestVisible="False" />

                                    <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    IsHitTestVisible="False"
                                    
                                    Margin="5,0,0,0" />
                                    <TextBox
                                    x:Name="PART_EditableTextBox"
                                    Grid.Column="1"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"
                                    HorizontalAlignment="Stretch"
                                    HorizontalContentAlignment="Stretch"
                                    Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                    CaretBrush="{TemplateBinding BorderBrush}"
                                    Visibility="Collapsed" />

                                    <wpf:SmartHint
                                    x:Name="Hint"
                                    Grid.Column="1"
                                    FontSize="{TemplateBinding FontSize}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                                    FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                    FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                    HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                    Hint="{TemplateBinding wpf:HintAssist.Hint}"
                                    Margin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}" />

                                    <!--<wpf:SmartHint
                                    x:Name="Hint"
                                    Grid.Column="1"
                                    HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontFamily="{TemplateBinding wpf:HintAssist.FontFamily}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                                    FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                    FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                    HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                    Hint="{TemplateBinding wpf:HintAssist.Hint}"
                                    Margin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}" />-->

                                    <StackPanel
                                    Orientation="Horizontal"
                                    Grid.Column="2">
                                        <TextBlock
                                        FontSize="{TemplateBinding FontSize}"
                                        Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}"
                                        IsHitTestVisible="False" />
                                        <Button x:Name="PART_ClearButton" Height="Auto" Padding="2 0 0 0" Style="{DynamicResource MaterialDesignToolButton}" Focusable="False">
                                            <Button.Visibility>
                                                <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}" />
                                                    <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </Button.Visibility>
                                            <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                </AdornerDecorator>
                <wpf:Underline
                x:Name="Underline"
                IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                wpf:TextFieldAssist.UnderlineBrush="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}"
                Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                Background="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}" />
                <Canvas VerticalAlignment="Bottom">
                    <TextBlock
                    Canvas.Top="2"
                    FontSize="10"
                    MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                    Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                    Text="{TemplateBinding wpf:HintAssist.HelperText}" />
                </Canvas>
                <wpf:ComboBoxPopup x:Name="PART_Popup"
                               Grid.Column="0"
                               AllowsTransparency="True"
                               Focusable="False"
                               HorizontalOffset="0"
                               RelativeHorizontalOffset="-23"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PlacementTarget="{Binding ElementName=templateRoot}"
                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                               UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                               Placement="Custom"
                               PopupAnimation="Fade"
                               VerticalOffset="0"
                               DefaultVerticalOffset="5"
                               DownVerticalOffset="-15"
                               UpVerticalOffset="15"
                               CornerRadius="2"
                               ContentMargin="6"
                               ContentMinWidth="{Binding ElementName=templateRoot, Path=ActualWidth, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                               wpf:ColorZoneAssist.Mode="{Binding Path=(wpf:ColorZoneAssist.Mode), RelativeSource={RelativeSource TemplatedParent}}"
                               Tag="{DynamicResource MaterialDesignPaper}"
                               ClassicMode="{Binding Path=(wpf:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                               UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                               DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                               ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">
                    <wpf:ComboBoxPopup.Background>
                        <MultiBinding Converter="{StaticResource FallbackBrushConverter}">
                            <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="Tag" ElementName="PART_Popup" />
                        </MultiBinding>
                    </wpf:ComboBoxPopup.Background>
                    <ContentControl>
                        <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  MinHeight="1"
                                  Background="{Binding Background, ElementName=PART_Popup}">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </ContentControl>
                </wpf:ComboBoxPopup>
            </Grid>
        </Border>


        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="Classic">
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="Opacity" Value="0.56" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility"
                        Value="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="wpf:HintAssist.IsFloating" Value="True">
                <Setter TargetName="Hint" Property="FloatingOffset">
                    <Setter.Value>
                        <MultiBinding>
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontFamily" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontSize" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(wpf:HintAssist.FloatingScale)" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="InnerRoot" Property="Margin">
                    <Setter.Value>
                        <MultiBinding>
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontFamily" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontSize" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(wpf:HintAssist.FloatingScale)" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="Visibility" Value="Hidden" />
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Validation.HasError" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Validation.HasError" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="Standard" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignPaper}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="Inverted" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignBody}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignPaper}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="PrimaryLight" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueLightBrush}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="PrimaryMid" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="PrimaryDark" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueDarkBrush}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="PrimaryMid"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryHueMidBrush}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="Light" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignLightBackground}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignLightForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="wpf:ColorZoneAssist.Mode" Value="Dark" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignDarkBackground}" />
                <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style BasedOn="{StaticResource MaterialDesignComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplateOverrided}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

</ResourceDictionary>